================================================================================
                    战斗逻辑问题分析 - 与文档对比
================================================================================

📅 发现日期：2025年10月29日
⚠️ 严重程度：高

================================================================================
发现的问题
================================================================================

【问题1：Perfect Deflect未实现】

文档要求（第94-95行）：
"Perfect Deflect - 当双方行为的速度值相同，但是卡牌Type之间存在克制，
被克制的一方行动会被打断，触发Perfect Deflect的一方的行为会提前并且立刻执行"

详细流程：
"被克制的一方先行动 - 速度条上Node进行一定向上的位移 - 播放对应角色行动的动画 
- 触发Perfect Deflect - 显示Perfect Deflect的弹窗 - 速度条上触发Perfect Deflect
一方的Node立刻移动到被克制的一方的行动Node之上 - 播放触发Perfect Deflect一方
的行动动画 - 触发行动带来的效果"

当前代码问题：
✗ 只有CheckPerfectDeflect()检测方法
✗ 在BattleManager.ExecuteCombatPhase()中有TODO标记但未实现
✗ 没有打断行动的逻辑
✗ 没有调整行动顺序的逻辑

【问题2：属性反应顺序错误】

文档要求（第96行）：
"属性反应 - 如果这一次行动触发了属性反应，则先结算属性反应的效果，再结算伤害"

当前代码顺序（ActionQueueSystem.ExecuteCardEffect）：
1. 计算基础伤害（包括力量等buff）
2. 调用元素反应（传入damage作为ref参数）
3. 造成伤害

问题分析：
? 实际上顺序看起来是对的（元素反应可以修改damage，然后造成伤害）
? 但元素反应内部的逻辑可能有问题

【问题3：词条效果计算顺序】

文档要求（第97行）：
"如果这一次行动时，目标拥有任意有关的词条效果，优先计算词条效果的影响，
再得出受效果影响后这次行动的数值（伤害/护盾值/效果值）"

当前代码：
1. CalculateAttackDamage() - 计算攻击者的力量、虚弱
2. TriggerElementalReaction() - 元素反应
3. TakeDamage() - 内部计算目标的防御词条（坚固、脆弱）

问题：
✗ 目标的词条（如脆弱）应该在计算最终伤害时考虑
✓ 但实际上在TakeDamage内部的CalculateDamageWithStatusEffects中计算了
? 这个顺序可能是正确的，但需要确认

【问题4：群体伤害（AoE）未实现】

文档要求（第144行）：
"是否是群体伤害（对所有敌人造成伤害）"

当前代码：
✗ ExecuteCardEffect只对单个目标造成伤害
✗ 没有检查cardEffect.isAoE
✗ 没有对所有敌人循环造成伤害

【问题5：战斗阶段的行动执行】

文档要求：
"整理完行动顺序，双方会根据这个行动顺序自动开始行动"
流程："速度条上Node进行位移 - 角色播放动画 - 触发效果并显示"

当前代码：
✓ 有排序
✓ 有循环执行
✗ 但没有检查Perfect Deflect
✗ 没有UI动画（Node位移）

【问题6：敌人行动意图未显示】

文档要求（第79行）：
"玩家可以看见敌人/怪物的行动意图"

当前代码：
✗ Enemy有GetActionsForTurn()方法
✗ 但在规划阶段没有调用并显示在UI上
✗ 玩家无法提前看到敌人要做什么

================================================================================
需要修复的文件
================================================================================

1. ActionQueueSystem.cs
   - 修复ExecuteCardEffect的逻辑顺序
   - 实现群体伤害（AoE）
   - 确保元素反应在伤害之前结算

2. BattleManager.cs
   - 实现Perfect Deflect的完整逻辑
   - 在规划阶段显示敌人行动意图
   - 修复ExecuteCombatPhase的行动执行流程

3. StatusEffectSystem.cs
   - 确认词条效果计算顺序正确

4. ElementalReactionSystem.cs
   - 确认元素反应修改damage的逻辑正确

================================================================================

